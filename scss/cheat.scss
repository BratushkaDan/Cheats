// https://sass-scss.ru/documentation/sassscript/
// css extension - вложенные свойства
.border-example-class {
  border: {
    color: black;
    style: dashed;
    spacing: 1px;
  }
}
.card-front {
  border-radius: {
    top-left: 50%;
    top-bottom: 50%;
  }
}

$variableColor: #5AFF9E;
.parent {
  &.child {} // selector is an element with both .parent and .child classes
  &-sm {} // ampesand is used to generate names
  &-md {}
  &-lg {}
  @media (max-width: 1199px) {} // media can be encapsulated into a selector

}

// extend example
.message {
  border: 1px solid #000;
  padding: 10px;
  color: #333;
}
.message-success {
  @extend .message;
  background: green;
}
.message-error {
  @extend .message;
  @extend .messageNew; // multiple styles can be extended
  background: red;
}
// ONLY extend example
%baseBlock {
  width: 200px;
  height: 120px;
  border: 2px solid crimson;
}
.header {
  @extend %baseBlock;
  font-size: 16px;
}
.footer {
  @extend %baseBlock;
  background: #300000;
}
// calc function
.element {
  height: calc(400px + 5%);
}
// mixins

/* without arguments */
@mixin without_arguments {}
body {
  @include without_arguments;
}

/* with arguments */
@mixin font-size($n) {
  font-size: $n * 1.2em;
}
$textSize: 1.6rem;
@mixin btnMixin($_mainColor, $_hoverColor, $_defaultArgument: defaultValue) { /* with arguments */
  font-size: $textSize;
  color: $_mainColor;

  &:hover {
    color: $_hoverColor;
  }
}

.btn {
  &-light {
    .btnMixin(#000, #8f8f8f8)
  }
  &-dark {
    .btnMixin(#fff, #888)
  }
}
/* unpredictable arguments */
@mixin boxShadow($shadows...) {
  box-shadow: $shadows;
}

.header {
  @include boxShadow(0 4px 5px #666, 2px 6px 10px #999);
}

/* desirable arguments */
@mixin boxShadow($_xShift: 2px, $_yShift: 2px, $_radius: 5px, $_color: #000) {
  box-shadow: $_xShift $_yShift $_radius $_color;
}

div {
  width: 200px;
  height: 100px;
  @include boxShadow($_color: red);
}
/* media-mixin */
@mixin media($_max, $_min: 0) {
  @media (min-width: $_min) and (max-width: $_max) {
    @content;
  }
}
/* @include media(1200px) {} */
@mixin lmedia($_min, $_max) {
  @media (min-width: $_min) and (max-width: $_max) {
    @content;
  }
}
/* color functions */
.color_funcs {
  $color;
  $color2;
  $mixed: mix($color, $color2, 10% /* 10% of first and 30% of second */);
  $inverted: invert($color);
  $opacified: opacify($color);
  $lightened: lighten($color);
  $darkened: darken($color);
  $transparentize: transparentize($color);
}
/* interpolation */
.interpolation {
  $background;
  background: url("#{$background}.jpg")
}
/* Number functions */
floor(3.5)
ceil(3.5)
round(3.5)
abs(3.5)
min(1, 2, 3)
max(1, 2, 3)
percentage(.5)   // 50%
random(1, 3)        // 0..3
/* For loop */
@for $i from 1 through 4 {
  .item-#{$i} { left: 20px * $i; }
}
/* Each loop */
$menu-items: home about services contact;

@each $item in $menu-items {
  .photo-#{$item} {
    background: url('images/#{$item}.jpg');
  }
}
/* nested */
$backgrounds: (home, 'home.jpg'), (about, 'about.jpg');

@each $id, $image in $backgrounds {
  .photo-#{$id} {
    background: url($image);
  }
}
/* While loop */
$i: 6;
@while $i > 0 {
  .item-#{$i} { width: 2em * $i; }
  $i: $i - 2;
}
/* Conditionals */
@if $position == 'left' {
  position: absolute;
  left: 0;
}
@else {
  position: static;
}
/* Maps */
$map: (key1: value1, key2: value2, key3: value3);
map-get($map, 'key1');
/* Lists */
$list: (a b c);
nth($list, 1)  // starts with 1
length($list)
@each $item in $list { ... }